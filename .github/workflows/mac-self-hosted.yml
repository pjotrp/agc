name: mac self-hosted CI

on:
#  push:
#      paths-ignore:
#      - '**.md'
#  pull_request:
#    branches: [ master ]
#    paths-ignore:
#      - '**.md'
  workflow_dispatch:



jobs:

#  defaults:
#    runs-on: [mac-self-hosted-M1, mac-self-hosted-Intel]
#    strategy:
#      matrix:
#        runner: [mac-self-hosted-M1, mac-self-hosted-Intel]



  checkout:
    strategy:
      matrix:
        runner: [mac-self-hosted-M1, mac-self-hosted-Intel]
    name: Checkout
    runs-on: ['${{ matrix.runner }}']
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

  #  - uses: maxim-lobanov/setup-xcode@v1
   #   with:
    #    xcode-version: latest-stable
      #  xcode-version: '14.1-beta'

  make-tests:
    strategy:
      matrix:
        runner: [mac-self-hosted-M1, mac-self-hosted-Intel]
    name: Make tests
    runs-on: ['${{ matrix.runner }}']
    needs: checkout
    env: 
      EXE_AGC: ./bin/agc
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  #  - uses: maxim-lobanov/setup-xcode@v1
  #    with:
  #      xcode-version: latest-stable
      #  xcode-version: '14.1-beta'
           
#    - name: make (g++ 9)
#      run: |
#        make clean
#        make CXX=g++-9 agc
#        make clean
        
#    - name: make (g++ 10)
#      run: |
#        make CXX=g++-10 agc
#        make clean
        
    - name: gmake (g++ 13)
      run: |
        gmake clean
        gmake CXX=g++-13 agc
        
    #- name: make (default)
    #  run: |
    #    make agc
      
    - name: Print usage
      run: |
        $EXE_AGC --help
    
 
  
  ########################################################################################
  
  camp-tests:
    strategy:
      matrix:
        runner: [mac-self-hosted-M1, mac-self-hosted-Intel]
    name: mini CAMP tests
    runs-on: ['${{ matrix.runner }}']
    needs: make-tests
    env:
     EXE_AGC: ./agc
     DATA: ../../../../data/
     FASTA: camp/FASTA-GZ
     OUT_NAME: test-camp
     REF_NUM: 3
     LINE_LEN: 60
    
    steps:
        
    - name: camp all together
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME-all
        ./run_agc_complete_compr_test $OUT_NAME-all $FASTA $REF_NUM $LINE_LEN
        rm -rf $OUT_NAME-all

    - name: camp one by one
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME-1by1
        ./run_agc_complete_one_by_one_test $OUT_NAME-1by1 $FASTA $LINE_LEN
        rm -rf $OUT_NAME-1by1

        
  ########################################################################################
  
  
  camp-tests-params:
    strategy:
      matrix:
        runner: [mac-self-hosted-M1, mac-self-hosted-Intel]
    name: mini CAMP tests params
    runs-on: ['${{ matrix.runner }}']
    needs: camp-tests
    env:
     EXE_AGC: ./agc
     DATA: ../../../../data/
     FASTA: camp/FASTA-GZ
     OUT_NAME: test-camp
     REF_NUM: 2
     LINE_LEN: 60
     PARAMS: "-a -b 50000 -k 17 -l 15 -s 1000"
     ADAPTIVE_APPEND: 1
    
    steps:
        
 
        
    - name: camp all together PAR $PARAMS
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME-all
        ./run_agc_complete_compr_test $OUT_NAME-all $FASTA $REF_NUM $LINE_LEN $PARAMS
        rm -rf $OUT_NAME-all

    - name: camp one by one $PARAMS
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME-1by1
        ./run_agc_complete_one_by_one_test $OUT_NAME-1by1 $FASTA $LINE_LEN $ADAPTIVE_APPEND $PARAMS
        rm -rf $OUT_NAME-1by1

        
  ########################################################################################
  
  salmo-tests:
    strategy:
      matrix:
        runner: [mac-self-hosted-M1, mac-self-hosted-Intel]
    name: mini SALMO tests
    runs-on: ['${{ matrix.runner }}']
    needs: make-tests
    env:
     EXE_AGC: ./agc
     DATA: ../../../../data/
     FASTA: salmo/FASTA-GZ
     OUT_NAME: test-salmo
     REF_NUM: 5
     LINE_LEN: 60
     ADAPTIVE_APPEND: 0
    
    steps:
        
    - name: salmo all together
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME-all
        ./run_agc_complete_compr_test $OUT_NAME-all $FASTA $REF_NUM $LINE_LEN
        rm -rf $OUT_NAME-all

        
    - name: salmo one by one
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME-1by1
        ./run_agc_complete_one_by_one_test $OUT_NAME-1by1 $FASTA $LINE_LEN $ADAPTIVE_APPEND
        rm -rf $OUT_NAME-1by1

  ########################################################################################
  
  salmo-tests-params:
    strategy:
      matrix:
        runner: [mac-self-hosted-M1, mac-self-hosted-Intel]
    name: mini SALMO tests params
    runs-on: ['${{ matrix.runner }}']
    needs: salmo-tests
    env:
     EXE_AGC: ./agc
     DATA: ../../../../data/
     FASTA: salmo/FASTA-GZ
     OUT_NAME: test-salmo
     REF_NUM: 5
     LINE_LEN: 60
     PARAMS: "-a -b 1000000000 -k 32 -l 32 -s 1000000"
     ADAPTIVE_APPEND: 1
    
    steps:
        
    - name: salmo all together
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME-all
        ./run_agc_complete_compr_test $OUT_NAME-all $FASTA $REF_NUM $LINE_LEN $PARAMS
        rm -rf $OUT_NAME-all

    - name: salmo one by one
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME-1by1
        ./run_agc_complete_one_by_one_test $OUT_NAME-1by1 $FASTA $LINE_LEN $ADAPTIVE_APPEND $PARAMS
        rm -rf $OUT_NAME-1by1

  ########################################################################################
  
  covid-tests:
    strategy:
      matrix:
        runner: [mac-self-hosted-M1, mac-self-hosted-Intel]
    name: mini covid tests
    runs-on: ['${{ matrix.runner }}']
    needs: make-tests
    env:
     EXE_AGC: ./agc
     DATA: ../../../../data/
     REF: covid/covid_ref.fa
     FASTA: covid/covid_rest_mini.fa
     FASTA2: covid/covid_rest_append.fa
     OUT_NAME: test-covid
     LINE_LEN: 70
     SET_LIST: list
     
         
    steps:
        
    - name: covid all together create + getcol
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME
        mkdir $OUT_NAME
        $EXE_AGC create -c -t 32 -o $OUT_NAME/$OUT_NAME.agc $REF $FASTA
        $EXE_AGC getcol -l $LINE_LEN -o $OUT_NAME -t 32 $OUT_NAME/$OUT_NAME.agc
        cd $OUT_NAME
        for f in *fa; do md5sum $f >> md5_all; done
        cmp md5_all ../covid/md5_all
        cd ..
        rm -rf $OUT_NAME

    - name: covid all together create -a + getset
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME
        mkdir $OUT_NAME
        $EXE_AGC create -a -c -t 32 -o $OUT_NAME/$OUT_NAME.agc $REF $FASTA
        $EXE_AGC listset $OUT_NAME/$OUT_NAME.agc > $OUT_NAME/$SET_LIST
        NUM_SMPL=`cat $OUT_NAME/$SET_LIST | wc -l`
        for ((i=1; i<=$NUM_SMPL; i++))
        do
          echo $i
          SMPL=`sed " $i q;d" $OUT_NAME/$SET_LIST`
          echo "./agc getset -l $LINE_LEN $OUT_NAME/$OUT_NAME.agc $SMPL > $OUT_NAME/$SMPL.fa"
          $EXE_AGC getset -l $LINE_LEN $OUT_NAME/$OUT_NAME.agc $SMPL > $OUT_NAME/$SMPL.fa
        done
        cd $OUT_NAME
        for f in *fa; do md5sum $f >> md5_all; done
        cmp md5_all ../covid/md5_all
        cd ..
        rm -rf $OUT_NAME

    - name: covid all together create -a + append + getset
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME
        mkdir $OUT_NAME
        $EXE_AGC create -a -c -t 32 -o $OUT_NAME/$OUT_NAME.agc $REF $FASTA
        $EXE_AGC append -a -c  $OUT_NAME/$OUT_NAME.agc $FASTA2 > $OUT_NAME/$OUT_NAME-APPEND.agc
        $EXE_AGC listset $OUT_NAME/$OUT_NAME-APPEND.agc > $OUT_NAME/$SET_LIST
        NUM_SMPL=`cat $OUT_NAME/$SET_LIST | wc -l`
        for ((i=1; i<=$NUM_SMPL; i++))
        do
          echo $i
          SMPL=`sed " $i q;d" $OUT_NAME/$SET_LIST`
          echo "./agc getset -l $LINE_LEN $OUT_NAME/$OUT_NAME-APPEND.agc $SMPL > $OUT_NAME/$SMPL.fa"
          $EXE_AGC getset -l $LINE_LEN $OUT_NAME/$OUT_NAME-APPEND.agc $SMPL > $OUT_NAME/$SMPL.fa
        done
        cd $OUT_NAME
        for f in *fa; do md5sum $f >> md5_all; done
        cmp md5_all ../covid/md5_all_append
        cd ..
        rm -rf $OUT_NAME

  ########################################################################################
  
  covid-tests-params:
    strategy:
      matrix:
        runner: [mac-self-hosted-M1, mac-self-hosted-Intel]
    name: mini covid tests params
    runs-on: ['${{ matrix.runner }}']
    needs: covid-tests
    env:
     EXE_AGC: ./agc
     DATA: ../../../../data/
     REF: covid/covid_ref.fa
     FASTA: covid/covid_rest_mini.fa
     FASTA2: covid/covid_rest_append.fa
     OUT_NAME: test-covid
     LINE_LEN: 70
     SET_LIST: list
     PARAMS: "-b 1000000000 -k 32 -l 32 -s 1000000"
     
         
    steps:
        
    - name: covid all together create + getcol
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME
        mkdir $OUT_NAME
        $EXE_AGC create $PARAMS -c -t 32 -o $OUT_NAME/$OUT_NAME.agc $REF $FASTA
        $EXE_AGC getcol -l $LINE_LEN -o $OUT_NAME -t 32 $OUT_NAME/$OUT_NAME.agc
        cd $OUT_NAME
        for f in *fa; do md5sum $f >> md5_all; done
        cmp md5_all ../covid/md5_all
        cd ..
        rm -rf $OUT_NAME

                    
  
  ########################################################################################
  
  hprc-tests:
    strategy:
      matrix:
        runner: [mac-self-hosted-M1, mac-self-hosted-Intel]
    name: mini HPRC tests
    runs-on: ['${{ matrix.runner }}']
    needs: [camp-tests-params, salmo-tests-params, covid-tests-params]
    env:
     EXE_AGC: ./agc
     DATA: ../../../../data/
     FASTA: hprc/FASTA-GZ
     OUT_NAME: test-hprc
     REF_NUM: 1
     LINE_LEN: 80
     ADAPTIVE_APPEND: 0
    
    steps:
        
    - name: hprc all together
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME-all
        ./run_agc_complete_compr_test $OUT_NAME-all $FASTA $REF_NUM $LINE_LEN
        rm -rf $OUT_NAME-all

    - name: hprc one by one
      run: |
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME-1by1
        ./run_agc_complete_one_by_one_test $OUT_NAME-1by1 $FASTA $LINE_LEN
        rm -rf $OUT_NAME-1by1

  ########################################################################################
  
  hprc-tests-params:
    strategy:
      matrix:
        runner: [mac-self-hosted-M1, mac-self-hosted-Intel]
    name: mini HPRC tests params
    runs-on: ['${{ matrix.runner }}']
    needs: [hprc-tests]
    env:
     EXE_AGC: ./agc
     DATA: ../../../../data/
     FASTA: hprc/FASTA-GZ
     OUT_NAME: test-hprc
     REF_NUM: 1
     LINE_LEN: 80
     ADAPTIVE_APPEND: 1
     PARAMS: "-a -b 1000000000 -k 21 -l 32 -s 1000000"

    
    steps:
        
    - name: hprc all together
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME-all
        ./run_agc_complete_compr_test $OUT_NAME-all $FASTA $REF_NUM $LINE_LEN $PARAMS
        rm -rf $OUT_NAME-all

    - name: hprc one by one
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME-1by1
        ./run_agc_complete_one_by_one_test $OUT_NAME-1by1 $FASTA $LINE_LEN $ADAPTIVE_APPEND $PARAMS
        rm -rf $OUT_NAME-1by1

  ########################################################################################
  
  hgsvc-tests-all:
    strategy:
      matrix:
        runner: [mac-self-hosted-M1, mac-self-hosted-Intel]
    name: mini HGSVC tests all
    runs-on: ['${{ matrix.runner }}']
    needs: [hprc-tests-params]
    env:
     EXE_AGC: ./agc
     DATA: ../../../../data/
     FASTA: hgsvc/FASTA-GZ
     OUT_NAME: test-hgsvc
     REF_NUM: 1
     LINE_LEN: 60
    
    steps:
        
    - name: hgsvc all together
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME-all
        ./run_agc_complete_compr_test $OUT_NAME-all $FASTA $REF_NUM $LINE_LEN
        rm -rf $OUT_NAME-all

  ########################################################################################
  
  hgsvc-tests-append:
    strategy:
      matrix:
        runner: [mac-self-hosted-M1, mac-self-hosted-Intel]
    name: mini HGSVC tests
    runs-on: ['${{ matrix.runner }}']
    needs: [hprc-tests-params]
    env:
     EXE_AGC: ./agc
     DATA: ../../../../data/
     FASTA: hgsvc/FASTA-GZ
     OUT_NAME: test-hgsvc
     REF_NUM: 1
     LINE_LEN: 60
    
    steps:
        
 
    - name: hgsvc one by one
      run: |
        rm -f $DATA/agc
        cp bin/agc $DATA/
        cd $DATA
        rm -rf $OUT_NAME-1by1
        ./run_agc_complete_one_by_one_test $OUT_NAME-1by1 $FASTA $LINE_LEN
        rm -rf $OUT_NAME-1by1

